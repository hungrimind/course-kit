{"id":"4","lessons":[{"id":"135","image":"courses/flutter/agora-video/course-showcase.png","links":[{"url":"https://github.com/hungrimind/flutter_video_call/tree/main","type":"github"},{"url":"https://discord.com/invite/nz8kFDm7gN","type":"discord"}],"content":"In this course, we will build a **video call** using Agora.\n\nWe will dive deep into what Agora is, and why we chose to use it. The result will be a fully functioning video call using a token server for security.","headline":"Video Call with Flutter","sectionType":"header","subheadline":"Build a fully functioning group call app with Flutter and Agora"},{"id":"136","type":"image","value":"courses/flutter/agora-video/agora.png","content":"Agora is a real-time engagement platform as a service. Similar to how AWS enables anyone to host their cloud infrastructure, Agora enables developers to add real-time engagement and interactivity features to their web and mobile apps without having to understand the complexities of network infrastructure.","heading":"What is Agora?","sectionType":"slide"},{"id":"137","type":"image","value":"courses/flutter/agora-video/real-time.png","content":"The best way to explain Real-Time Engagement is with some examples:\n\n* Live audio streaming (Live Podcasting -> think Twitter spaces, Clubhouse)\n* Live video streaming (think -> YouTube Live, Instagram Live, etc)\n* Voice and Video Calls (think Zoom, FaceTime, or Skype, but in your app)\n* Chat (think 1:1 and group chats like iMessage, WhatsApp, Snap DM)\n* Live Stream Gaming (think Twitch but directly in the game)\n* Real-time Metaverse Worlds (think Roblox or Horizon Worlds)\n\nAnything where the user is interacting with other users directly. Agora has the following SDKS to support these use cases.\n\n* Video/Voice - Real-Time Communications (aka video calls and audio calls)\n* Chat - Real-Time Messaging\n* Signaling - Real-Time Data Sharing","heading":"What is Real-Time Engagement?","sectionType":"slide"},{"id":"138","type":"image","value":"courses/flutter/agora-video/video-options.png","content":"In this course, we are going to build a real-time video communication app. To do this Agora provides us with a few options.\n\n**I want a simple low-code solution.**\n\nThe simplest and easiest way to implement video calls within your app is Agora's UIKit. This provides you with all the pre-built elements to create a full video call with 4 lines of code. These come with pre-defined UIs to fit the most common use-cases, so if you're looking for a quick way to drop-in commonly used live video communication features, the UIKit is a great approach.\n\n**I want full control of the call and UI**\n\nUsing the complete Agora SDK you have complete control of everything related to the video call. You have full control of defining the UI, security layer, user management, events, and everything related to the video call.\n\nFor this course, we will cover the Agora Video SDK so that we can fully understand the technology.","heading":"Video Call Options","sectionType":"slide"},{"id":"139","file":"lib/main.dart","type":"flutter","value":"import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: const MyHomePage(),\n      theme: ThemeData(\n        colorScheme: const ColorScheme.light(\n          primary: Colors.black,\n        ),\n      ),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({super.key});\n\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text(\"Flutter Demo\"),\n      ),\n      body: const Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[],\n        ),\n      ),\n    );\n  }\n}\n\n","content":"We will start this project from scratch. Run the `flutter create .` command within your project folder to create a brand new Flutter project. \n\nYou can remove the comments and the counter logic to have a simpler starting point. I also set my theme to be black and white so it can have the *hungrimind look*.\n\nCheck the preview using the phone icon below, to see what your sexy new app should look like. You should see a whole bunch of nothing (for now).\n\nWith all that nothingness you are ready!","heading":"Create Your Project","sectionType":"slide","previewImage":"courses/flutter/agora-video/starter.png","highlight":"14-18"},{"id":"140","type":"image","value":"courses/flutter/agora-video/create-project.png","content":"To use the Agora platform you'll need a developer account. Don't worry sign up is free and everybody gets a free 10,000 minutes of usage per month.\n\nLog into your Agora developer account and click the `New Project` button. Give your project a name, and under Authentication Mode choose Testing Mode.\n\nWe'll cover and enable the Secure Mode option later in the course.\n\n\n\n\n\n","heading":"Create an Agora Account","sectionType":"slide"},{"id":"141","type":"image","value":"courses/flutter/agora-video/app-id.png","content":"For apps to connect to the Agora platform, developers need a valid `App ID`. This acts as the key to unlocking access to Agora's full suite of solutions, including the Video communication features we're going to use in this course.","heading":"App ID","sectionType":"slide"},{"id":"142","file":"lib/consts.dart","type":"flutter","value":"const appId = \"your-app-id-here\";","content":"The `App ID` isn't really meant to be secure. It's not good to share your `App ID` because others can use your key to access the Agora network. We will add a security layer called tokens later that makes your apps safer.\n\nHowever, this `App ID` will be used throughout the app since it is the main connection to your Agora account. Create a `consts.dart` file and add your App ID in there.\n\n> If you are putting this project on GitHub make sure to add this consts file to your `.gitignore`. This won't make your app secure, but sharing your `App ID` publicly is still a bad idea.","heading":"Create consts.dart file","sectionType":"slide","previewImage":"courses/flutter/agora-video/starter.png"},{"id":"143","file":"pubspec.yaml","type":"yaml","value":"dependencies:\n  flutter:\n    sdk: flutter\n  agora_rtc_engine:","content":"To use the Agora services, we need to install the Agora SDK. In your terminal run the command `flutter pub add agora_rtc_engine` to add the Agora package. You should see this package added to your \\`pubspec.yaml file.","heading":"Add Agora Package","sectionType":"slide"},{"id":"144","file":"pubspec.yaml","type":"yaml","value":"dependencies:\n  flutter:\n    sdk: flutter\n  agora_rtc_engine:\n  permission_handler:","content":"Since this is going to be a video call, we will need access to the device's microphone and camera. Most devices have some security measures for accessing the microphone and camera, for that reason we are going to use the `permission_handler` packages to make it easy for us to use and retrieve the required permissions across different devices and operating systems.\n\nRun `flutter pub add permission_handler` to install the package into your project.","heading":"Platform Permissions","sectionType":"slide"},{"id":"145","file":"pubspec.yaml","type":"image","value":"courses/flutter/agora-video/android-and-ios.png","content":"There are a few platform-specific configuration rules we need to add to the AndroidManifest.xml and the info.plist to enable the device permissions needed to add Agora's real-time video features into our app.\n\n### Android\n\nOpen the AndroidManifest.xml file and add the required device permissions to the file.\n\n```\n<manifest>\n...\n<uses-permission  android:name=\"android.permission.READ_PHONE_STATE\"/>\n<uses-permission  android:name=\"android.permission.INTERNET\"  />\n<uses-permission  android:name=\"android.permission.RECORD_AUDIO\"  />\n<uses-permission  android:name=\"android.permission.CAMERA\"  />\n<uses-permission  android:name=\"android.permission.MODIFY_AUDIO_SETTINGS\"  />\n<uses-permission  android:name=\"android.permission.ACCESS_NETWORK_STATE\"  />\n<!-- The Agora SDK requires Bluetooth permissions in case users are using Bluetooth devices.-->\n<uses-permission  android:name=\"android.permission.BLUETOOTH\"  />\n...\n</manifest>\n```\n\n### iOS\n\nOpen info.plist and add:\n\n* Privacy - Microphone Usage Description, and add a note in the Value column.\n* Privacy - Camera Usage Description, and add a note in the Value column.\n\nYour application can still run the voice call when it is switched to the background if the background mode is enabled. Select the app target in Xcode, click the Capabilities tab, enable Background Modes, and check Audio, AirPlay, and Picture in Picture.","heading":"iOS and Android Permissions","sectionType":"slide"},{"id":"146","content":"You completed the Introductory section of the Course. We have learned what Agora is, and how to install all the prerequisites.\n\nIn this next section, we will build out the form screen where users can enter what channel they want to join.","heading":"End of Section 1","sectionType":"md"},{"id":"147","type":"image","value":"courses/flutter/agora-video/room.png","content":"When joining a video call using Agora you are joining a **Channel**. You can think of a channel as a room in real life. People within the channel can talk to each other, while people outside of the channel cannot talk to the people inside.\n\nEach **Channel** needs to have a unique name. These channel names can be created in any way you want as long as they are unique. For every unique channel name, there is exactly **one channel** for people to join. \n\nWe are building a simple group calling application, and our channel name will be a string. This way you can tell your friends to join room “tadas”, and they will type in the letters t-a-d-a-s into a form and join that channel.\n\nSo the first step is to create an input form.","heading":"What is a Video Call?","sectionType":"slide"},{"id":"148","file":"lib/main.dart","type":"flutter","value":"final _formKey = GlobalKey<FormState>();\nfinal _controller = TextEditingController();\n\n@override\nvoid dispose() {\n  _controller.dispose();\n  super.dispose();\n}\n\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    body: Center(\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: <Widget>[\n          const Spacer(flex: 1),\n          Form(\n            key: _formKey,\n            child: Column(\n              children: <Widget>[\n                TextFormField(\n                  controller: _controller,\n                ),\n              ],\n            ),\n          ),\n          const Spacer(flex: 2),\n        ],\n      ),\n    ),\n  );\n}","content":"Within the main screen, we need to create a `Form` widget and a `TextFormField` within. We need to pass in a `GlobalKey` to our `Form` widget to do validation. We will discuss this in-depth in a few lessons.\n\nWhen using a `TextFormField` you need to pass in a controller to get “control” of the contents of that `TextFormField`. We will retrieve the contents of the form using this controller.\n\nIt is also important to `dispose()` of that controller, whenever it’s not being used. A controller allocates some memory, once you dispose of it, the memory is freed up for whatever else needs it.\n\n> We will discuss the `_formKey` in a later slide.","heading":"Create a Form","highlight":"","sectionType":"slide","previewImage":"courses/flutter/agora-video/ui-form-field.png"},{"id":"149","file":"lib/main.dart","type":"flutter","value":"Form(\n  key: _formKey,\n  child: Column(\n    children: <Widget>[\n      TextFormField(\n        controller: _controller,\n      ),\n\t  TextButton(\n        onPressed: () {\n          Navigator.push(\n            context,\n            MaterialPageRoute(\n              builder: (context) => Call(\n                channelName: _controller.text,\n              ),\n            ),\n          );\n        },\n        child: const Row(\n          mainAxisAlignment: MainAxisAlignment.center,\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            Padding(\n              padding: EdgeInsets.all(8.0),\n              child: Text('Join Channel'),\n            ),\n            Icon(Icons.arrow_forward),\n          ],\n        ),\n      ),\n    ],\n  ),\n),","content":"We will be using the `TextEditingController` to retrieve the contents of our form and pass it to the call page. As we mentioned above Agora needs a unique **channel name** for each channel. The contents of this `TextFormField` will be used to initialize or join a channel with that unique name.\n\nThe actual page where the call will be happening will be called the `Call` page, and we will pass `channelName` as a parameter. Create this widget in a `call.dart` file.","heading":"Pass the Channel Name","highlight":"8-30","sectionType":"slide","previewImage":"courses/flutter/agora-video/ui-join-button.png"},{"id":"150","file":"lib/main.dart","type":"flutter","value":"Form(\n  key: _formKey,\n  child: Column(\n    children: <Widget>[\n      TextFormField(\n        controller: _controller,\n\t    validator: (value) {\n          if (value == null || value.isEmpty) {\n            return 'Please enter channel name';\n          }\n          return null;\n        },\n      ),\n\t  TextButton(\n        onPressed: () {\n\t\t\tif (_formKey.currentState!.validate()) {\n\t          Navigator.push(\n\t            context,\n\t            MaterialPageRoute(\n\t              builder: (context) => Call(\n\t                channelName: _controller.text,\n\t              ),\n\t            ),\n\t          );\n\t\t   }\n        },\n        child: const Row(\n          mainAxisAlignment: MainAxisAlignment.center,\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            Padding(\n              padding: EdgeInsets.all(8.0),\n              child: Text('Join Channel'),\n            ),\n            Icon(Icons.arrow_forward),\n          ],\n        ),\n      ),\n    ],\n  ),\n),","content":"A few lessons ago we passed in a `GlobalKey` to our `Form` widget. Why did we do this?\n\nWe did it for *validation.* Validation is used to check that the contents of the form provide the correct type of information. For passwords you can check that it’s long enough, has special characters, etc.\n\nFor our channel name, we just need it to not be empty. Using `_formKey.currentState!.validate()`, the `Form` checks every input and whether all the validators return `null`.\n\n* `null` means everything went well\n* A string return means it doesn’t pass validation, and our `TextFormField` will show this error string to the user.","heading":"Validate the Form","highlight":"7-12,16,25","sectionType":"slide","previewImage":"courses/flutter/agora-video/ui-join-button.png"},{"id":"151","file":"lib/main.dart","type":"flutter","value":"Form(\n  key: _formKey,\n  child: Column(\n    children: <Widget>[\n      Image.network(\n        'https://www.hungrimind.com/logo-agora.png',\n        height: 200,\n        width: 200,\n      ),\n      Padding(\n        padding: const EdgeInsets.all(16.0),\n        child: TextFormField(\n          controller: _controller,\n          decoration: const InputDecoration(\n              labelText: 'Channel Name', \n\t\t\t  border: OutlineInputBorder()\n\t\t  ),\n          validator: (value) {\n            if (value == null || value.isEmpty) {\n              return 'Please enter channel name';\n            }\n            return null;\n          },\n        ),\n      ),\n      // TextButton\n    ],\n  ),\n),","content":"Our last step is to make this login screen look a little bit prettier. We will do this by adding: \n\n- The Agora logo at the top. \n- Some padding for the `TextFormField`, to give it some breathing room.\n- Label text within our input so people know to enter \"Channel Name\" inside.\n- A border to the input field.\n\nIt’s no Picasso, but it’s respectable.","heading":"Make it Pretty","highlight":"5-11,14-17,25","sectionType":"slide","previewImage":"courses/flutter/agora-video/ui-pretty-form.png"},{"id":"152","content":"You have completed the Form Screen section of the course. We learned how video calls in Agora are based on channels and to join a channel with your friends you need a unique channel name. We created a beautiful form for users to enter a string as their channel name.\n\nIn the next section, we will add the logic for the video call, and use the channel name that was passed in to start up a video call!","heading":"End of Section 2","sectionType":"md"},{"id":"153","file":"lib/call.dart","type":"flutter","value":"class Call extends StatefulWidget {\n  final String channelName;\n  const Call({required this.channelName, super.key});\n\n  @override\n  State<Call> createState() => _CallState();\n}\n\nclass _CallState extends State<Call> {\n  @override\n  Widget build(BuildContext context) {\n    return const Scaffold();\n  }\n}\n\n","content":"All the prerequisites to have a video call are met: we have a channel name and an App ID. Now we will be working in the `call.dart` file inside the `Call` widget. This will be the widget showing the video call.\n\nWe created this as an empty `StatefulWidget` with a parameter for `channelName`.\n\n> If you click the phone icon you will see an all white screen. It is not broken, our app will look like a plain white screen while we implement the backend logic.","heading":"Call Screen","highlight":"","sectionType":"slide","previewImage":"courses/flutter/agora-video/ui-placeholder.png"},{"id":"154","file":"call.dart","type":"image","value":"courses/flutter/agora-video/ui-two-people.png","content":"Before getting to the code, what does a Video Call contain, technically?\n* Your own video feed aka **Local Video** (to make sure you look good)\n* Other participant's video feed aka **Remote Video**\n* Buttons (ex. end call, toggle mic, switch camera)\n\nThat's all you need to have a complete video call. As we go through this part of the course, you will notice that the setup for the video call is straightforward (thanks to Agora), the more complicated part is creating a nice UI for all the users. \n\nThis is the main reason why the [agora_uikit](https://pub.dev/packages/agora_uikit) was created. It simplifies the UI and even the setup for some basic use cases. But in this course, we will walk through it all with the low-level SDK so we understand each piece of the technology, and you can choose the best option for your projects.","heading":"Parts of a Video Call","highlight":"","sectionType":"slide","previewImage":"courses/flutter/agora-video/ui-placeholder.png"},{"id":"155","file":"lib/call.dart","type":"flutter","value":"final RtcEngine _engine = createAgoraRtcEngine();\n\n@override\nvoid initState() {\n  super.initState();\n  initAgora();\n}\n\nFuture<void> initAgora() async {\n\n  await _engine.initialize(const RtcEngineContext(\n    appId: appId,\n    channelProfile: ChannelProfileType.channelProfileLiveBroadcasting,\n  ));\n}\n","content":"The workhorse between everything Agora-related is the Engine. The engine is the connection point between your application and the Agora network.\n\n> The network is called SD-RTN™ or Software Defined Real-Time Network. This is the core technology behind everything Agora and why latency and quality are so much better than WebRTC.\n\nWe need to instantiate the `RtcEngine` since this will be used throughout our file. We want to initialize it right as this screen loads, so in the `initState` we we will initialize that engine using our `appId`. This connects us to the SD-RTN™.\n\nThe initialize function needs two fields passed in: `appId` and `channelProfile`. The `channelProfile` sets up different channel characteristics:\n\n* `channelProfileCommunication` which is best for 1 on 1 calls.\n* `channelProfileLiveBroadcasting` is best for many users and maximizes for scale.\n\nWe will use `channelProfileLiveBroadcasting` since our app will support more than just 1-1 video calling.","heading":"The Agora Engine","highlight":"","sectionType":"slide","previewImage":"courses/flutter/agora-video/ui-placeholder.png"},{"id":"156","file":"lib/call.dart","type":"flutter","value":"@override\nvoid dispose() {\n  super.dispose();\n  disposeAgora();\n}\n\nFuture<void> disposeAgora() async {\n  await _engine.leaveChannel();\n  await _engine.release();\n}\n","content":"Before moving forward with the initialization, we need to do some janitor work and set up the dispose method.\n\nThe Agora engine is the connection to the SD-RTN™ and it uses some system memory, so whenever we are not using the video calling feature, there is no reason to keep that memory locked up. \n\nTo release it we need to call the `leaveChannel` and `release` methods on the engine in the Flutter `dispose` method.\n\nWe will cover channels later and I'll discuss the `leaveChannel` function in a later slide, but for now, this gets rid of our video call completely, whenever this page is disposed of. ","heading":"Janitor Work","highlight":"","sectionType":"slide","previewImage":"courses/flutter/agora-video/ui-placeholder.png"},{"id":"157","file":"lib/call.dart","type":"flutter","value":"  Future<void> initAgora() async {\n    await [Permission.microphone, Permission.camera].request();\n    await _engine.initialize(const RtcEngineContext(\n      appId: appId,\n      channelProfile: ChannelProfileType.channelProfileLiveBroadcasting,\n    ));\n  }\n","content":"Now back to the initialization process. A video call would not be a video call if there was no audio or video. \n\nEach device has its safety protections for allowing your apps assess to those peripherals. This is a very important safety measure because you don't want weirdos getting access to that. But in this case, we're having a call, so we need those peripherals.\n\nEvery device can prompt the user with a message asking to give that app access to the camera and microphone. From the Flutter side, we can use the `permissions_handler` package to show the user that prompt.\n\nOnce they accept we will have access to their camera and microphone.","heading":"Request Permissions","highlight":"2","sectionType":"slide","previewImage":"courses/flutter/agora-video/ui-placeholder.png"},{"id":"158","file":"lib/call.dart","type":"flutter","value":"Future<void> initAgora() async {\n  await [Permission.microphone, Permission.camera].request();\n  await _engine.initialize(const RtcEngineContext(\n    appId: appId,\n    channelProfile: ChannelProfileType.channelProfileLiveBroadcasting,\n  ));\n\n  _engine.registerEventHandler(\n    RtcEngineEventHandler(\n      onJoinChannelSuccess: (RtcConnection connection, int elapsed) {},\n      onError: (ErrorCodeType code, String message) {},\n      onUserJoined: (RtcConnection connection, int remoteUid, int elapsed) {},\n      onUserOffline: (RtcConnection connection, int remoteUid, UserOfflineReasonType reason) {},\n    ),\n  );\n}\n","content":"The event handler is where most of the activity will take place as you scale up your video calls. Just like the name says, it handles events that happen on your video call. \n\nSo anything that could happen within your video call will trigger one of the **events** and pass you some information. \n\nWe will utilize 4 events for now:\n* onJoinChannelSuccess - Triggered when a local user joins the channel successfully.\n* onError - Triggered when an error occurs.\n* onUserJoined - Triggered when a remote user joins the channel.\n* onUserOffline - Triggered when a remote user leaves the channel or drops offline.\n\n","heading":"Event Handler","highlight":"8-15","sectionType":"slide","previewImage":"courses/flutter/agora-video/ui-placeholder.png"},{"id":"159","file":"lib/call.dart","type":"flutter","value":"await _engine.setClientRole(role: ClientRoleType.clientRoleBroadcaster);\nawait _engine.enableVideo();\n","content":"There are a few more setup steps we need to do before joining the call.\n\n#### Set Client Role\n\nTwo types of users can join a video call: **Broadcasters** and **Audience**.\n\nThe broadcasters will be sending out their video/audio feed to everybody as well as receiving any other broadcaster feeds, while the audience members just receive the video/audio feeds.\n\nIn this case, we want to set everybody as broadcasters, because it's a video call, not a livestream.\n\n#### Enable Video\n\nBy default, Agora calls only send audio feeds. To send video feeds as well we call the `enableVideo` function.","heading":"Some More Setup","highlight":"","sectionType":"slide","previewImage":"courses/flutter/agora-video/ui-placeholder.png"},{"id":"160","file":"lib/call.dart","type":"flutter","value":"await _engine.joinChannel(\n  token: \"\",\n  channelId: widget.channelName,\n  uid: 0,\n  options: const ChannelMediaOptions(),\n);\n","content":"Finally, at the bottom of the initialization function, we will call the `joinChannel` function. Just like the function name suggests, this is the function that joins the channel that was created on the Agora backend.\n\nThere are 4 required fields:\n\n* **token** \\- This is needed for security purposes\\, there will be a whole section covering tokens\\, so we will dive deeper there\\. For now\\, we pass an empty string\\, which makes our video calls \\*\\*not secure\\. \\*\\*\n* **channelId** \\- The name of the channel we want to join\\. In this case\\, we passed the channel name to this widget\\.\n* **uid** \\- The unique identifier of the user that is joining\\. We can set it to any integer that we want\\, but if we set it to `0`, Agora will create a random uid that will get passed back in the `onJoinChannelSuccess` event handler.\n* **options** \\- Channel\\-wide options for the type of media that is being published\\. We will use the default options\\, but you can add screen sharing\\, encoding\\, and other options here\\.","heading":"Join the Channel","highlight":"8-15","sectionType":"slide","previewImage":"courses/flutter/agora-video/ui-placeholder.png"},{"id":"161","file":"lib/call.dart","type":"flutter","value":"int? _localUser;\n\nFuture<void> initAgora() async {\n  // ...\n\n  _engine.registerEventHandler(\n    RtcEngineEventHandler(\n      onJoinChannelSuccess: (RtcConnection connection, int elapsed) {\n        setState(() {\n          _localUser = connection.localUid;\n        });\n      },\n      onError: (ErrorCodeType code, String message) {},\n      onUserJoined: (RtcConnection connection, int remoteUid, int elapsed) {},\n      onUserOffline: (RtcConnection connection, int remoteUid,\n          UserOfflineReasonType reason) {},\n    ),\n  );\n\n  // ...\n}\n","content":"Finally, the basic setup is done, and we can start implementing the video feed!\n\nThe Agora SDK gives us access to a component called `AgoraVideoView` that displays the video feed and this component needs two things: \n* The Agora Engine\n* The UID of the user whose video needs to be displayed.\n\nSince we set our UID to 0 in the `joinChannel` function, Agora is going to assign a random UID that is returned in the `onJoinChannelSuccess` function. \n\nWe will save this UID to a variable that can be used in the `build` function to check when the user has successfully joined.\n\n","heading":"Create a Local User","highlight":"1, 9-11","sectionType":"slide","previewImage":"courses/flutter/agora-video/ui-placeholder.png"},{"id":"162","file":"lib/call.dart","type":"flutter","value":"Scaffold(\n  body: _localUser != null\n      ? AgoraVideoView(\n          controller: VideoViewController(\n            rtcEngine: _engine,\n            canvas: const VideoCanvas(uid: 0),\n          ),\n        )\n      : const Center(child: CircularProgressIndicator()),\n);\n","content":"At this point, we have all the information we need to finally display the video.\n\nWhen the screen first loads, the user won't have joined the channel yet and the `_localUser` variable will be null. In this case, we will display a `CircularProgressIndicator`.\n\nTo display the user we use an `AgoraVideoView` widget and pass in a `VideoViewController` that contains our engine and a `VideoCanvas`.\n\n> Note: When you pass `uid: 0` to the `VideoCanvas` it uses the local user's video feed.\n\nOnce the user has successfully joined our UI will update to show the user across the whole screen.\n\n> The preview finally has some updates :)","heading":"Display the Video","highlight":"2-9","sectionType":"slide","previewImage":"courses/flutter/agora-video/ui-first-video.png"},{"id":"163","file":"lib/buttons.dart","type":"flutter","value":"class CallButtons extends StatefulWidget {\n  final RtcEngine engine;\n\n  const CallButtons({super.key, required this.engine});\n\n  @override\n  State<CallButtons> createState() => _CallButtonsState();\n}\n\nclass _CallButtonsState extends State<CallButtons> {\n  @override\n  Widget build(BuildContext context) {\n    return SafeArea(\n      child: Align(\n        alignment: Alignment.bottomCenter,\n        child: Row(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            RawMaterialButton(\n              onPressed: () async {\n                Navigator.pop(context);\n              },\n              shape: const CircleBorder(),\n              elevation: 2.0,\n              fillColor: Colors.redAccent,\n              padding: const EdgeInsets.all(15.0),\n              child: const Icon(\n                Icons.call_end,\n                color: Colors.white,\n                size: 35.0,\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\n","content":"To keep our code organized we will add another file to our repository called `buttons.dart`. \n\nThis will be a `StatefulWidget` named `CallButtons` and we will pass in the `RtcEngine` (you'll see why in the next slide). \n\nWe will set up a `Row` widget that is aligned to the bottom of the screen. You can use any button you want in this `Row`, but I like the `RawMaterialButton` so that I can style it to be a big red button with a phone icon at the bottom of the screen.\n\nWhen we press that button, we will call `Navigator.pop(context)` to jump back to the form screen. Because we implemented the `dispose()` method in `call.dart`, the act of removing the screen from the navigation stack will cause the video call to end properly.\n\n","heading":"End Call Button","highlight":"21","sectionType":"slide","previewImage":"courses/flutter/agora-video/ui-first-video.png"},{"id":"164","file":"lib/call.dart","type":"flutter","value":"Scaffold(\n  body: Stack(\n    children: [\n      _localUser != null\n          ? AgoraVideoView(\n              controller: VideoViewController(\n                rtcEngine: _engine,\n                canvas: const VideoCanvas(uid: 0),\n              ),\n            )\n          : const Center(child: CircularProgressIndicator()),\n      CallButtons(engine: _engine)\n    ],\n  ),\n);\n","content":"These buttons are of no use to us in that file until we add them to our home page. To do this we create a `Stack`. The video call component will be the layer underneath, and the buttons will rest on top of the video. \n\nIf you click the phone icon you can see our end call button that we added!","heading":"CallButtons","highlight":"2-14","sectionType":"slide","previewImage":"courses/flutter/agora-video/ui-end-call.png"},{"id":"165","file":"lib/buttons.dart","type":"flutter","value":"RawMaterialButton(\n  onPressed: () async {\n    await widget.engine.switchCamera();\n  },\n  shape: const CircleBorder(),\n  elevation: 2.0,\n  fillColor: Colors.white,\n  padding: const EdgeInsets.all(12.0),\n  child: const Icon(\n    Icons.switch_camera,\n    color: Colors.blueAccent,\n    size: 20.0,\n  ),\n),\n","content":"Back in the `CallButtons` widget, we will add a smaller gray button to the right of the end call button.\n\nTo switch the camera, we use the `RTCEngine` that we passed in and call the `switchCamera` function. It's that simple.","heading":"Switch Camera","highlight":"3","sectionType":"slide","previewImage":"courses/flutter/agora-video/ui-switch-camera.png"},{"id":"166","file":"lib/buttons.dart","type":"flutter","value":"bool muted = false;\n\n@override\nWidget build(BuildContext context) {\n  return SafeArea(\n    child: Align(\n      alignment: Alignment.bottomCenter,\n      child: Row(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: <Widget>[\n          RawMaterialButton(\n            onPressed: () async {\n              setState(() {\n                muted = !muted;\n              });\n              await widget.engine.muteLocalAudioStream(muted);\n            },\n            shape: const CircleBorder(),\n            elevation: 2.0,\n            fillColor: muted ? Colors.blueAccent : Colors.white,\n            padding: const EdgeInsets.all(12.0),\n            child: Icon(\n              muted ? Icons.mic_off : Icons.mic,\n              color: muted ? Colors.white : Colors.blueAccent,\n              size: 20.0,\n            ),\n          ),\n          // ...\n        ],\n      ),\n    ),\n  );\n}\n","content":"The last button we need to add is a toggle mute button to the left of the end call.\n\nThis is a tiny bit more complex because we want to maintain the current mute state. To do this we need a variable called `muted` and toggle with a `setState`.\n\nWe display the current state to the user by changing the color of the button based on the `muted` state. When they click it, we update that state, call the `muteLocalAudioStream` function on the engine, and pass in what we want the mute state to be.\n\nAnd there we have all our buttons!","heading":"Toggle Mute","highlight":"1, 11-27","sectionType":"slide","previewImage":"courses/flutter/agora-video/ui-mute.png"},{"id":"167","file":"lib/call.dart","type":"flutter","value":"final List<int> _remoteUsers = [];\n\nFuture<void> initAgora() async {\n  // ...\n\n  _engine.registerEventHandler(\n    RtcEngineEventHandler(\n      onJoinChannelSuccess: (RtcConnection connection, int elapsed) {\n        setState(() {\n          _localUser = connection.localUid;\n        });\n      },\n      onError: (ErrorCodeType code, String message) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text(\"Error: $code, $message\")),\n        );\n        Navigator.pop(context);\n      },\n      onUserJoined: (RtcConnection connection, int remoteUid, int elapsed) {\n        setState(() {\n          _remoteUsers.add(remoteUid);\n        });\n      },\n      onUserOffline: (RtcConnection connection, int remoteUid,\n          UserOfflineReasonType reason) {\n        setState(() {\n          _remoteUsers.remove(remoteUid);\n        });\n      },\n    ),\n  );\n\n  // ...\n}\n","content":"The remote users are displayed in a similar way as the local user. We need their UID and the Agora Engine.\n\nWe need to keep all the remote users in a list. In the event handler, on the `onUserJoined` event, we will add them to that list, and on the `onUserOffline` event we will remove them from that list.\n\nSince we're in the event handler let's add the error state as well. We will show the user the error message and jump back to the form screen if anything goes wrong.","heading":"Remote Users","highlight":"1,14-17, 20-22, 26-28","sectionType":"slide","previewImage":"courses/flutter/agora-video/ui-mute.png"},{"id":"168","file":"lib/call.dart","type":"flutter","value":"@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    body: Stack(\n      children: [\n        switch (_remoteUsers.length) {\n          0 => localVideo(),\n          1 => Container(),\n          2 => Container(),\n          _ => const Center(\n              child: Text(\"This app supports up to 3 people in a call\"),\n            ),\n        },\n        CallButtons(engine: _engine)\n      ],\n    ),\n  );\n}\n\nWidget localVideo() {\n  return _localUser != null\n      ? AgoraVideoView(\n          controller: VideoViewController(\n            rtcEngine: _engine,\n            canvas: const VideoCanvas(uid: 0),\n          ),\n        )\n      : const Center(child: CircularProgressIndicator());\n}\n","content":"The next step is setting up a UI for multiple users. In this application, we are going to support up to 3 people within a call, but you would follow the same process for any amount of users that you want.\n\nTo make the code more readable let's export the previous local user UI into a function called `localVideo()`.\n\nThen, based on how many remote users we have in our `remoteUsers` list we will set up a different-looking UI. What we currently have is the correct UI when we have `0` remote users (aka only the local user). In that case, just return the `localVideo` function.\n\nIn the case that there are more than 3 people in a call, we will display a `Text` that our app doesn't support that many users.\n\n","heading":"Multiple User UI","highlight":"6-13,20-29","sectionType":"slide","previewImage":"courses/flutter/agora-video/ui-mute.png"},{"id":"169","file":"lib/call.dart","type":"flutter","value":"Widget remoteVideo(int remoteUid) {\n  return AgoraVideoView(\n    controller: VideoViewController.remote(\n      rtcEngine: _engine,\n      canvas: VideoCanvas(\n        uid: remoteUid,\n      ),\n      connection: RtcConnection(channelId: widget.channelName),\n    ),\n  );\n}\n","content":"Along with the `localVideo` view that we created, we need 2 more. One of those is the remote user UI.\n\nThis works similarly to the local user except we use `VideoViewController.remote()` and have to pass in the actual UID of the remote user instead of `0` like we did for the local user.\n\nThis also needs a `RtcConnection` to give information about which channel this video feed is connected to.","heading":"Remote UI","highlight":"","sectionType":"slide","previewImage":"courses/flutter/agora-video/ui-mute.png"},{"id":"170","file":"lib/call.dart","type":"flutter","value":"Widget miniLocalVideo() {\n  return SafeArea(\n    child: Align(\n      alignment: Alignment.topLeft,\n      child: Container(\n        margin: const EdgeInsets.all(20),\n        decoration: BoxDecoration(\n          borderRadius: BorderRadius.circular(8.0),\n        ),\n        clipBehavior: Clip.antiAlias,\n        width: 100,\n        height: 150,\n        child: localVideo(),\n      ),\n    ),\n  );\n}\n","content":"And the last UI element is just for a fancier look. I like how Facetime calls look, and when other people join the call you have your local video in the corner much smaller than the other person's video.\n\nI will call this `miniLocalVideo` where we set the width and height for our `localVideo` component to only take up a small part of the screen, and align it to the top left with some padding.","heading":"Mini Local Video","highlight":"","sectionType":"slide","previewImage":"courses/flutter/agora-video/ui-mute.png"},{"id":"171","file":"lib/call.dart","type":"flutter","value":"Stack(\n  children: [\n    switch (_remoteUsers.length) {\n      0 => localVideo(),\n      1 => Stack(\n          children: [\n            remoteVideo(_remoteUsers[0]),\n            miniLocalVideo(),\n          ],\n        ),\n      2 => Container\n      _ => const Center(\n          child: Text(\"This app supports up to 3 people in a call\"),\n        ),\n    },\n    CallButtons(engine: _engine)\n  ],\n),\n","content":"To get the UI with two people we will create another `Stack` without our switch case statement. \n\nWhen there is only one remote user the `miniLocalVideo` will be stacked on top of the `remoteVideo` to give us the Facetime-style look. ","heading":"Two People UI","highlight":"5-10","sectionType":"slide","previewImage":"courses/flutter/agora-video/ui-two-people.png"},{"id":"172","file":"lib/call.dart","type":"flutter","value":"Stack(\n  children: [\n    switch (_remoteUsers.length) {\n      0 => localVideo(),\n      1 => Stack(\n          children: [\n            remoteVideo(_remoteUsers[0]),\n            miniLocalVideo(),\n          ],\n        ),\n      2 => Stack(\n          children: [\n            Column(\n              children: [\n                Expanded(child: remoteVideo(_remoteUsers[0])),\n                Expanded(child: remoteVideo(_remoteUsers[1])),\n              ],\n            ),\n            miniLocalVideo(),\n          ],\n        ),\n      _ => const Center(\n          child: Text(\"This app supports up to 3 people in a call\"),\n        ),\n    },\n    CallButtons(engine: _engine)\n  ],\n),\n","content":"To extend this to 3 people within a call, we will add the two remote videos into a column.\n\nIf you want to add support for more people in the UI, you can keep adding rows and columns to the `Column` widget.","heading":"Three People UI","highlight":"11-21","sectionType":"slide","previewImage":"courses/flutter/agora-video/ui-three-people.png"},{"id":"173","content":"You have completed the Call Screen section of the course. In this section, we built a fully functioning video call! While Agora can support hundreds of users, we built our UI to support up to three.\n\nIn the next section, we will create a token server, and use that to add token security to our application so that it is production-ready!","heading":"End of Section 3","sectionType":"md"},{"id":"174","type":"image","value":"courses/flutter/agora-video/security.jpg","content":"This section is all about adding tokens to our application. Until now, we haven't used tokens at all so why do we need to add them?\n\nBecause of ***Security.***\n\nWithout tokens, as long as someone has our `appId` they can join any room that they want.\n\nBut once tokens are added we can manage and allow the users to only join the room if they have a valid token. It is a form of authentication and user management.","heading":"Why Tokens?","sectionType":"slide"},{"id":"175","type":"image","value":"courses/flutter/agora-video/enable-certificate.png","content":"The first thing we need to do is go into our Agora console and go into the project that we are using for this application.\n\nSince we started building this whole application in test mode, we should see a button to enable Primary Certificate.\n\nThis certificate enables token authentication on our project, and it will give us a string for setting up the token generator.","heading":"Enable Certificate","sectionType":"slide"},{"id":"176","type":"image","value":"courses/flutter/agora-video/disable-access.png","content":"We should see another popup after we enable the certificate to \"Disable Unauthorized Access\".\n\nAdding a Primary Certificate doesn't remove the test mode access, so make sure to click this disable button to fully secure our application.","heading":"Disable Test Mode","sectionType":"slide"},{"id":"177","type":"image","value":"courses/flutter/agora-video/backend-logic.png","content":"The next step is creating a Token Generator. A Token Generator is a completely separate web server that does the creation and updating of your tokens.\n\nSince an Agora video call is not hosted anywhere on the internet (it is just a direct connection), there is no API that we can call to create and update our tokens.\n\nNow you can build your own backend service to do all the token management, but the Agora team has built a one-click deployment for the most popular hosting platforms. You just need to add in your `App ID` and the `Certificate ID`.\n\nYou will see something asking about CORS, which is Cross-Origin Resource Sharing. This is for allowing you to make requests to a different domain than the site requesting. In this case, our backend server will be making requests to the Agora network, so make sure to allow it.","heading":"Create a Token Generator","sectionType":"slide"},{"id":"178","type":"image","value":"courses/flutter/agora-video/backend-logic.png","content":"The first time I did this, I was curious why we need the backend at all, and why can't we request the token directly from our video call app.\n\nThis is again for **security reasons**. When requesting the token, we have the App ID in the request. If this was coming directly from the device, this network request can be intercepted and the malicious actor can gain access to that App ID and potentially that video call.\n\nWhen we make a simple request to the backend, the App ID and Certificate ID are stored in the server, which makes it impossible to access from the application layer.","heading":"Why Backend?","sectionType":"slide"},{"id":"179","file":"consts.dart","type":"flutter","value":"const appId = \"<---Your-App-Id--->\";\n\nconst tokenUrl = \"<---Your-Server-URL--->\";\n\n","content":"This server that we created will have a specific URL that it can be reached on. You should find this in the dashboard where you deployed it.\n\n> Note: It should look something like https://agora-token-server-xxxx.onrender.com if you deployed using Render.","heading":"Add URL to consts","sectionType":"slide","previewImage":""},{"id":"180","file":"pubspec.yaml","type":"yaml","value":"dependencies:\n  flutter:\n    sdk: flutter\n  agora_rtc_engine: \n  permission_handler: \n  http: \n","content":"Within our app, we will need to be calling that URL. To do that we need to install the `http` package so we can make the calls to our server.","heading":"Install http package","highlight":"6","sectionType":"slide"},{"id":"181","file":"lib/token.dart","type":"flutter","value":"Future<String> fetchToken(int uid, String channelName) async {\n  String url = '$tokenUrl/rtc/$channelName/publisher/uid/${uid.toString()}?expiry=45';\n\n  final response = await get(Uri.parse(url));\n\n  if (response.statusCode == 200) {\n    Map<String, dynamic> json = jsonDecode(response.body);\n    return json['rtcToken'];\n  } else {\n    throw Exception(\n        'Failed to fetch a token. Make sure that your server URL is valid');\n  }\n}\n\n","content":"To keep our code organized, let's create another file called `token.dart`.\n\nHere we will define just one function called `fetchToken`. We will need to pass in two parameters: **uid** of the user trying to join the channel and the **channelName** that they are trying to join. Within that function, we will call our web server using the `get` request.\n\nThe URL is formatted as\n\n```\n$tokenUrl/<product>/$channelName/<role>/<token-type>/${uid.toString}/?expiry=<time-in-seconds>\n```\n\n* **$tokenUrl** \\- Base URL we saved in `consts.dart`.\n* **\\<product>** \\- Type of token\\. Either `rtc` or `rtm` are different Agora products.\n* **$channelName** \\- Which channel name we are requesting a token for\\.\n* **\\<role>** \\- Users role\\. Either `publisher` or `subscriber`.\n* **\\<token-type>** \\- Either `uid` for integer or `userAccount` for string. `uid` is recommended.\n* **${uid.toString()}** \\- UID for the user requesting a token\\.\n* **expiry=45** \\- This is optional\\. The number is in seconds\\. By default\\, it is 24 hours\\, but we are making it 45 seconds so we can test to make sure new tokens are getting created properly\\. You should remove this when your app is in production\\.\n\n> Note: The reason we choose 45 seconds is because the `onTokenPrivilegeWillExpire` gets triggered 30 seconds before your token will expire. We will get to this callback soon.\n\nIf our request is successful with status `200` we will decode the response and return our token.","heading":"Fetch Token Function","sectionType":"slide"},{"id":"182","file":"lib/call.dart","type":"flutter","value":"await _engine.joinChannel(\n  token: await fetchToken(0, widget.roomName),\n  channelId: widget.roomName,\n  uid: 0,\n  options: const ChannelMediaOptions(),\n);\n","content":"There are two places where we need to retrieve tokens:\n\n1. When we initially joined the video call.\n2. When our old token is expiring.\n\nIn the `joinChannel` function, we need to update the empty string that we passed to the token field to the return of our `fetchToken` function.","heading":"Fetch Initial Token","sectionType":"slide","previewImage":"courses/flutter/agora-video/ui-mute.png"},{"id":"183","file":"lib/call.dart","type":"flutter","value":"RtcEngineEventHandler(\n  // ...\n  onTokenPrivilegeWillExpire: (RtcConnection connection, String token) async {\n    String token = await fetchToken(0, widget.roomName);\n    _engine.renewToken(token);\n  },\n),\n","content":"The second place we need to fetch the token is when it is expiring. The event handler has an event called `onTokenPrivilegeWillExpire`. This gets triggered 30 seconds before our token expires.\n\nIn this event, we need to fetch a new token and pass the token to the `renewToken` function on the Agora engine.\n\nWe have our token system fully working! Feel free to remove the 45-second expiration in the token request URL to make it the default 24 hours.","heading":"Renew Token","sectionType":"slide","previewImage":"courses/flutter/agora-video/ui-mute.png"},{"id":"184","content":"### Congratulations\n\n**That's it!** You have now created a fully functional video call using Agora. \n\nIf you enjoyed this course, I would really appreciate it if you shared it with your friends or even just told them about [hungrimind.com](https://www.hungrimind.com). But in general, thank you so much, and I hope to see you in the next course.","heading":"End of Course","sectionType":"md"}]}